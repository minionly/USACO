#include <bits/stdc++.h>
using namespace std;
#define endl '\n' 

const int sz = 1e6 + 5;
vector<int> gr[sz];
int d1[sz]; //shortest path from k
int d2[sz]; //shortest path to leaf
int ans = 0;

int dfs(int u, int p){
    d1[u] = d1[p] + 1;

    if(gr[u].size() == 1){
        d2[u] = 1;
    }
    for(int v : gr[u]){
        if(v == p){
            continue;
        }
        dfs(v, u);
        d2[u] = min(d2[u], d2[v] + 1);
    }
}

void solve(int u, int p){
    if(d2[u] <= d1[u]){
        ans++;
        return;
    }
    for(int v : gr[u]){
        if(v == p){
            continue;
        }
        solve(v, u);
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    // freopen("test.inp","r",stdin);
    // freopen("test.out","w",stdout);
    freopen("atlarge.in","r",stdin);
    freopen("atlarge.out","w",stdout);

    int n, k;
    cin>>n>>k;

    for(int i=1;i<n;++i){
        int u, v;
        cin>>u>>v;
        gr[u].push_back(v);
        gr[v].push_back(u);
    }

    //memset
    for(int i=1;i<=n;++i){
        d1[i] = d2[i] = 1e9;
    }

    dfs(k, 0);
    solve(k, 0);

    cout<<ans;

    return 0;
}
